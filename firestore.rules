rules_version = '2';
service cloud.firestore {
  // Things to remember:
  // request is the sent data.
  // resource is the data that currently exists.
  match /databases/{database}/documents {

    match /{document=**} {
      allow read, write: if false;
    }
  
    function getGroups(userId) {
    	 return get(/databases/$(database)/documents/users/$(userId)).data.groups;
    }
    
    function isSignedIn() {
    	return request.auth != null;
    }

    function isValidNewNote() {
      return isSignedIn() &&
        request.resource.data.owner == request.auth.uid &&
        resource == null;
    }

    function isOwner(userId) {
      // Owner is obviously logged in
    	return isSignedIn() && userId == request.auth.uid
    }

    match /groups/{groupCode} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.owner);
      allow update, delete: if isOwner(resource.data.owner);

      match /notes/{noteId} {
        allow create: if isOwner(request.resource.data.owner)
        allow update, delete: if isOwner(resource.data.owner);

        allow read: if
          isOwner(resource.data.owner) ||
          (
            isSignedIn() &&
            resource.data.shared
          )
      }
    }
    
    match /users/{userId} {
    	allow read, write: if isOwner(userId);

      match /notes/{noteId} {
        allow read, write: if isOwner(userId);
      }
    }

  }
}
